<?php

/**
 * @file
 * Install, update and uninstall functions for the social_user module.
 */

use Drupal\user\RoleInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_user.
 */
function social_user_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    RoleInterface::ANONYMOUS_ID,
    [
      // Anonymous users may view user information. This is required so that
      // things like author teasers work properly. Access to specific profile or
      // user fields is limited on a field level in the social_profile module.
      'access user profiles',
    ]
  );
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'access user profiles',
      'cancel account',
      'change own username',
    ]
  );
  user_role_grant_permissions(
    'verified',
    [
      // Only when a user is verified are they allowed to view who else is a
      // member of the platform (e.g. through search or the all-people page).
      'list users',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'access user profiles',
      'block users',
      'administer navigation settings',
      'administer social_user settings',
      'assign contentmanager role',
      'assign sitemanager role',
      'assign verified role',
      'view blocked user',
    ]
  );
}

/**
 * Implements hook_update_last_removed().
 */
function social_user_update_last_removed() : int {
  // Removed all update hooks before 10.0.
  return 8810;
}

/**
 * Implements hook_update_dependencies().
 */
function social_user_update_dependencies(): array {
  // Run the update hook with the "Grant Profile permissions for the
  // Authenticated user role" only after an update hook "Reassign permissions
  // between roles" in social_core.
  $dependencies['social_user'][11002] = [
    'social_core' => 11002,
  ];

  return $dependencies;
}

/**
 * Create the default configuration for the verified immediately site setting.
 */
function social_user_update_11001(): void {
  $config = \Drupal::getContainer()->get('config.factory')->getEditable('social_user.settings');
  $config->set('verified_immediately', TRUE)->save();
}

/**
 * Grant Profile permissions for the Authenticated user role.
 */
function social_user_update_11002(): void {
  // Grant the Authenticated user new permissions.
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'cancel account',
      'change own username',
    ]
  );
}

/**
 * Update permissions for the sitemanager role.
 */
function social_user_update_11003(): void {
  // Grant the sitemanagers new permissions.
  user_role_grant_permissions('sitemanager', [
    'assign verified role',
  ]);
}

/**
 * Update the views filter to limit operators in admin/people.
 */
function social_user_update_11004(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_user', 'social_user_update_11004');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Revoke the permission select account cancellation method .
 */
function social_user_update_11005(): void {
  user_role_revoke_permissions(RoleInterface::AUTHENTICATED_ID, [
    'select account cancellation method',
  ]);
}

/**
 * Update 'views.view.user_admin_people'.
 */
function social_user_update_11006(array &$sandbox): void {
  $config_file = drupal_get_path('module', 'social_user') . '/config/static/social_user_update_11006.yml';

  if (is_file($config_file)) {
    $settings = Yaml::parse((string) file_get_contents($config_file));
    if (is_array($settings)) {
      $config = \Drupal::configFactory()
        ->getEditable('views.view.user_admin_people');

      $config->setData($settings)->save(TRUE);
    }
  }

/**
 * Update access to user profiles.
 */
function social_user_update_11004() : void {
  user_role_grant_permissions(
    RoleInterface::ANONYMOUS_ID,
    [
      // Anonymous users may view user information. This is required so that
      // things like author teasers work properly. Access to specific profile or
      // user fields is limited on a field level in the social_profile module.
      'access user profiles',
    ]
  );
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'access user profiles',
    ]
  );
  user_role_grant_permissions(
    'verified',
    [
      // Only when a user is verified are they allowed to view who else is a
      // member of the platform (e.g. through search or the all-people page).
      'list users',
    ]
  );
}
